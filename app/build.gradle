plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'com.google.gms.google-services'  // Google Services plugin
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'

}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.pindex.main"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.pindex.main.TestRunner"

        // To avoid compilation errors due to the DEX limitations
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    androidExtensions {
        experimental = true
    }
    buildFeatures {
        viewBinding true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // To avoid compilation errors due to the DEX limitations
    implementation 'com.android.support:multidex:1.0.3'

    // Import the Firebase BoM (automatically pulls the below libraries with the right versions)
    implementation platform('com.google.firebase:firebase-bom:26.3.0')
    // Import Firebase authentification
    implementation 'com.google.firebase:firebase-auth-ktx'
    // Import Cloud Firestore Android library
    implementation 'com.google.firebase:firebase-firestore-ktx'
    // Import Firebase Storage library
    implementation 'com.google.firebase:firebase-storage-ktx:19.2.1'
    // Coroutines support for Firebase operations
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'

    // Paging
    def paging_version = "3.0.0-alpha12"
    implementation "androidx.paging:paging-runtime:$paging_version"
    // alternatively - without Android dependencies for tests
    testImplementation "androidx.paging:paging-common:$paging_version"
    // optional - RxJava2 support
    implementation "androidx.paging:paging-rxjava2:$paging_version"
    // optional - RxJava3 support
    implementation "androidx.paging:paging-rxjava3:$paging_version"
    // optional - Guava ListenableFuture support
    implementation "androidx.paging:paging-guava:$paging_version"
    // Jetpack Compose Integration
    implementation "androidx.paging:paging-compose:1.0.0-alpha05"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:1.1.0"

    // Glide (Media Manager)
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    /*
    * Test
    */
    // Unit test
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'junit:junit:4.13'
    // For UI tests (androidTest)
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:2.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.2.0'

    // ActivityScenarioRule
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
    // Fragments
    implementation ("androidx.fragment:fragment-testing:1.2.5", {
        exclude group: 'androidx.test', module: 'core'
    })
    // Data Faker
    implementation 'io.github.serpro69:kotlin-faker:1.4.1'
    // Hilt
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    androidTestImplementation 'androidx.test:core-ktx:1.2.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // Exclude Hilt generated classes
            '**/*Hilt*.*',
            'hilt_aggregated_deps/**',
            '**/*_Factory.class',
            '**/*_MembersInjector.class'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}
